require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/reference_tables/role_levels", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # ReferenceTables::RoleLevel. As you add validations to ReferenceTables::RoleLevel, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    d = create(:random_degree)
    pt = create(:reference_tables_position_type)
    attributes_for(:reference_tables_role_level, reference_tables_degree_id: d.id, reference_tables_position_type_id: pt.id)
  }

  let(:invalid_attributes) {
    attributes_for(:reference_tables_role_level_invalid)
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # ReferenceTables::RoleLevelsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  describe "GET /index" do
    it "renders a successful response" do
      ReferenceTables::RoleLevel.create! valid_attributes
      get reference_tables_role_levels_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      role_level = ReferenceTables::RoleLevel.create! valid_attributes
      get reference_tables_role_level_url(role_level), as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new ReferenceTables::RoleLevel" do
        expect {
          post reference_tables_role_levels_url,
               params: { reference_tables_role_level: valid_attributes }, headers: valid_headers, as: :json
        }.to change(ReferenceTables::RoleLevel, :count).by(1)
      end

      it "renders a JSON response with the new reference_tables_role_level" do
        post reference_tables_role_levels_url,
             params: { reference_tables_role_level: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new ReferenceTables::RoleLevel" do
        expect {
          post reference_tables_role_levels_url,
               params: { reference_tables_role_level: invalid_attributes }, as: :json
        }.to change(ReferenceTables::RoleLevel, :count).by(0)
      end

      it "renders a JSON response with errors for the new reference_tables_role_level" do
        post reference_tables_role_levels_url,
             params: { reference_tables_role_level: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        attributes_for(:reference_tables_role_level)
      }

      it "updates the requested reference_tables_role_level" do
        role_level = ReferenceTables::RoleLevel.create! valid_attributes
        patch reference_tables_role_level_url(role_level),
              params: { reference_tables_role_level: new_attributes }, headers: valid_headers, as: :json
        role_level.reload
      end

      it "renders a JSON response with the reference_tables_role_level" do
        role_level = ReferenceTables::RoleLevel.create! valid_attributes
        patch reference_tables_role_level_url(role_level),
              params: { reference_tables_role_level: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the reference_tables_role_level" do
        role_level = ReferenceTables::RoleLevel.create! valid_attributes
        patch reference_tables_role_level_url(role_level),
              params: { reference_tables_role_level: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested reference_tables_role_level" do
      role_level = ReferenceTables::RoleLevel.create! valid_attributes
      expect {
        delete reference_tables_role_level_url(role_level), headers: valid_headers, as: :json
      }.to change(ReferenceTables::RoleLevel, :count).by(-1)
    end
  end
end
